name: pipeline

on:
  push:
    branches:
      - main
      - develop
      - feat/*

jobs:
  unit-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Run unit tests
      run: npm test

    - name: Generate test coverage
      run: npm run coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v4.4.0
      with:
        name: coverage-report
        path: coverage/

  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Check Java version
      run: java -version

    - name: Install dependencies
      run: npm install

    - name: Run SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} #gerado automaticamente pelo github
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} #gerado manualmente no sonarCloud
      run: npm run sonar

  build:
    runs-on: ubuntu-latest
    needs: code-analysis

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build

  deploy:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-latest

    steps:
      # Instalar Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Configurar credenciais da AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ID }}
          aws-region: us-east-1

      # Build da imagem Docker
      - name: Build Docker Image
        run: docker-compose up --build

      # Obter o ID da imagem Docker criada
      - name: Get Docker Image ID
        id: image_id
        run: echo "::set-output name=image_id::$(docker images | grep fiap | awk '{print $3}' | uniq)"

      # Obter o ID da conta AWS
      - name: Get AWS Account ID
        id: aws_account
        run: echo "::set-output name=account_id::$(aws sts get-caller-identity --query Account --output text)"

      # Login no Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # Tag da imagem Docker
      - name: Tag Docker Image
        run: docker tag ${{ steps.image_id.outputs.image_id }} ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/fiap_fast_food_app:1.0

      # Push da imagem Docker para o ECR
      - name: Push Docker Image to ECR
        run: docker push ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/fiap_fast_food_app:1.0

      # Atualizar kubeconfig para o cluster EKS
      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name fiap_fast_food_eks

      # Aplicar mudanças no Kubernetes (implementar ou atualizar a aplicação)
      - name: Deploy to EKS
        run: kubectl apply -f kubernetes/Application
